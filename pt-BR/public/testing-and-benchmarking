<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go Em Exemplos: Testing and Benchmarking</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'embed-directive';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'command-line-arguments';
          }
          
      }
  </script>
  <body>
    <div class="example" id="testing-and-benchmarking">
      <h2><a href="./">Go Em Exemplos</a>: Testing and Benchmarking</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Testes unitários é uma parte importante de se
escrever programas em Go. O pacote <code>testing</code>
fornece as ferramentas necessárias para escrever
testes unitários e o comando <code>go test</code> executa
os tests.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Pela didática da demonstração, este código está no pacote
<code>main</code>, mas poderia estar em qualquer pacote. Tipicamente,
os testes permanecem no mesmo pacote em que o código
principal está.</p>

          </td>
          <td class="code leading">
            <a target="_blank" href="https://go.dev/play/p/1Vh-C6CErtp"><img title="Executar código em nova aba" src="play.png" class="run" /></a><img title="Copiar código" src="clipboard.png" class="copy" />
          <pre class="chroma">
<span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;testing&#34;</span>
<span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Será testada uma implementação simples de uma função
que verifica qual inteiro é menor. Usualmente,
o código a ser testado ficaria isolado num arquivo
com nome similar a <code>intutils.go</code>, e outro arquivo apenas
para testes, teria o nome parecido com <code>intutils_test.go</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">IntMin</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">a</span> <span class="p">&lt;</span> <span class="nx">b</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">a</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">b</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Um teste é criado ao escrever uma função com a
palavra <code>Test</code> no início do nome.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">TestIntMinBasic</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ans</span> <span class="o">:=</span> <span class="nf">IntMin</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">ans</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">2</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>t.Error*</code> will report test failures but continue
executing the test. <code>t.Fatal*</code> will report test
failures and stop the test immediately.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
        <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;IntMin(2, -2) = %d; want -2&#34;</span><span class="p">,</span> <span class="nx">ans</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Escrever testes pode ser algo repetitivo, então é idiomático
usar <em>table-driven style</em> ou <em>estilo orientado a tabela</em>,
em que os inputs de teste e os outputs esperados são listados
numa tabela e um simples loop, interage com a tabela e realiza
os testes.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">TestIntMinTableDriven</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">tests</span> <span class="p">=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
        <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span>
        <span class="nx">want</span> <span class="kt">int</span>
    <span class="p">}{</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
        <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
    <span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>t.Run permite a execução de &ldquo;subtests&rdquo;,
um para cada entrada da tabela. Estes são
exibidos separadamente ao executar o comando
<code>go test -v</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">        <span class="nx">testname</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d,%d&#34;</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span>
        <span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">testname</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">ans</span> <span class="o">:=</span> <span class="nf">IntMin</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span>
            <span class="k">if</span> <span class="nx">ans</span> <span class="o">!=</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span> <span class="p">{</span>
                <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;got %d, want %d&#34;</span><span class="p">,</span> <span class="nx">ans</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Testes de benchmark também ficam em arquivos <code>_test.go</code>
e são nomeados com a palavra <code>Benchmark</code> no início.
A execução do <code>testing</code> executa cada função de benchmark várias
vezes, aumentando <code>b.N</code> em cada execução até que seja realizada
uma medida precisa.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">BenchmarkIntMin</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Tipicamente o benchmark roda a função que
está a ser avaliada em um loop, por <code>b.N</code> vezes.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nf">IntMin</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Executa todos os testes no projeto atual de maneira
verbosa.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="gp">$</span> go test -v
<span class="go">== RUN   TestIntMinBasic
</span><span class="go">--- PASS: TestIntMinBasic (0.00s)
</span><span class="go">=== RUN   TestIntMinTableDriven
</span><span class="go">=== RUN   TestIntMinTableDriven/0,1
</span><span class="go">=== RUN   TestIntMinTableDriven/1,0
</span><span class="go">=== RUN   TestIntMinTableDriven/2,-2
</span><span class="go">=== RUN   TestIntMinTableDriven/0,-1
</span><span class="go">=== RUN   TestIntMinTableDriven/-1,0
</span><span class="go">--- PASS: TestIntMinTableDriven (0.00s)
</span><span class="go">    --- PASS: TestIntMinTableDriven/0,1 (0.00s)
</span><span class="go">    --- PASS: TestIntMinTableDriven/1,0 (0.00s)
</span><span class="go">    --- PASS: TestIntMinTableDriven/2,-2 (0.00s)
</span><span class="go">    --- PASS: TestIntMinTableDriven/0,-1 (0.00s)
</span><span class="go">    --- PASS: TestIntMinTableDriven/-1,0 (0.00s)
</span><span class="go">PASS
</span><span class="go">ok      examples/testing-and-benchmarking    0.023s</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Executa todos os benchmarks no projeto atual.
Todos os testes são executados antes dos
benchmarks. A flag <code>bench</code> filtra funções
de benchmark pelos nomes com expressão regular.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
<span class="gp">$</span> go test -v -bench=.
<span class="go">goos: darwin
</span><span class="go">goarch: arm64
</span><span class="go">pkg: examples/testing
</span><span class="go">BenchmarkIntMin-8 1000000000 0.3136 ns/op
</span><span class="go">PASS
</span><span class="go">ok      examples/testing-and-benchmarking    0.351s</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Próximo exemplo: <a href="command-line-arguments">Command-Line Arguments</a>.
      </p>
      

    <p class="footer">
      Por <a href="https://markmcgranaghan.com">Mark McGranaghan</a> e <a href="https://eli.thegreenplace.net">Eli Bendersky</a> | traduzido por <a href="https://github.com/lucassauro">Lucassauro</a> | <a href="https://github.com/lucassauro/gobyexample">contribua</a> | <a href="https://github.com/mmcgrana/gobyexample#license">licença</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"testing\"\u000A)\u000A');codeLines.push('func IntMin(a, b int) int {\u000A    if a \u003C b {\u000A        return a\u000A    }\u000A    return b\u000A}\u000A');codeLines.push('func TestIntMinBasic(t *testing.T) {\u000A    ans :\u003D IntMin(2, -2)\u000A    if ans !\u003D -2 {\u000A');codeLines.push('        t.Errorf(\"IntMin(2, -2) \u003D %d; want -2\", ans)\u000A    }\u000A}\u000A');codeLines.push('func TestIntMinTableDriven(t *testing.T) {\u000A    var tests \u003D []struct {\u000A        a, b int\u000A        want int\u000A    }{\u000A        {0, 1, 0},\u000A        {1, 0, 0},\u000A        {2, -2, -2},\u000A        {0, -1, -1},\u000A        {-1, 0, -1},\u000A    }\u000A');codeLines.push('    for _, tt :\u003D range tests {\u000A');codeLines.push('        testname :\u003D fmt.Sprintf(\"%d,%d\", tt.a, tt.b)\u000A        t.Run(testname, func(t *testing.T) {\u000A            ans :\u003D IntMin(tt.a, tt.b)\u000A            if ans !\u003D tt.want {\u000A                t.Errorf(\"got %d, want %d\", ans, tt.want)\u000A            }\u000A        })\u000A    }\u000A}\u000A');codeLines.push('func BenchmarkIntMin(b *testing.B) {\u000A');codeLines.push('    for i :\u003D 0; i \u003C b.N; i++ {\u000A        IntMin(1, 2)\u000A    }\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
