<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go Em Exemplos: Panic</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'sorting-by-functions';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'defer';
          }
          
      }
  </script>
  <body>
    <div class="example" id="panic">
      <h2><a href="./">Go Em Exemplos</a>: Panic</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Um <code>panic</code> tipicamente significa que acontenceu algum
erro inesperado. Geralmente é utilizado para falhar
rapidamente em erros que não deviam ocorrer durante
uma operação normal, ou que não está sendo tratado
de maneira <em>graciosa</em> ou apropriada.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a target="_blank" href="https://go.dev/play/p/04lGLJP-UHb"><img title="Executar código em nova aba" src="play.png" class="run" /></a><img title="Copiar código" src="clipboard.png" class="copy" />
          <pre class="chroma"><span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="s">&#34;os&#34;</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>O panic será utilizado por todo o site para checar por
erros inesperados. Este é o único código em todo o site
especificamente desenhado para causar um panic.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nb">panic</span><span class="p">(</span><span class="s">&#34;uhhh... Houston, we have a problem.&#34;</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Um uso comum do panic é para abortar a execução
de determinado código se uma função retorna um
erro que não é tratado. Aqui está um exemplo
simulado de <code>panic</code> ao receber um erro inesperado
ao se criar um novo arquivo.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">&#34;/tmp/file&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Ao executar este código ocorrerá um panic e será
exibido no console uma mensagem de erro, um
&ldquo;rastro&rdquo; de execução da goroutine, e saída,
ou exit, com código diferente de zero.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Quando o primeiro panic na função main dispara,
o código é interrompido, sem continuar até o
final da execução. Para visualizar o que ocorre
no segundo panic deste exemplo, é necessário
comentar o primeiro panic.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="gp">$</span> go run panic.go
<span class="go">panic: uhhh... Houston, we have a problem.</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="go">goroutine 1 [running]:
</span><span class="go">main.main()
</span><span class="go">    /.../panic.go:16 +0x27
</span><span class="go">exit status 2</span></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Note que, diferentemente de outras linguagens que
usam exceções para tratar erros, em Go é idiomático
usar retornos indicativos de erro sempre que possível.</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Próximo exemplo: <a href="defer">Defer</a>.
      </p>
      

    <p class="footer">
      Por <a href="https://markmcgranaghan.com">Mark McGranaghan</a> e <a href="https://eli.thegreenplace.net">Eli Bendersky</a> | traduzido por <a href="https://github.com/lucassauro">Lucassauro</a> | <a href="https://github.com/lucassauro/gobyexample">contribua</a> | <a href="https://github.com/mmcgrana/gobyexample#license">licença</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import \"os\"\u000A');codeLines.push('func main() {\u000A');codeLines.push('    panic(\"uhhh... Houston, we have a problem.\")\u000A');codeLines.push('    _, err :\u003D os.Create(\"/tmp/file\")\u000A    if err !\u003D nil {\u000A        panic(err)\u000A    }\u000A}\u000A');codeLines.push('');codeLines.push('');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
