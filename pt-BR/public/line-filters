<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go Em Exemplos: Line Filters</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'writing-files';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'file-paths';
          }
          
      }
  </script>
  <body>
    <div class="example" id="line-filters">
      <h2><a href="./">Go Em Exemplos</a>: Line Filters</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Um <em>line filter</em>, ou filtro de linha, é um tipo comum
de software que lê o input em <code>stdin</code>, processa,
e então imprime um resultado em <code>stdout</code>.
Os comandos <code>grep</code> e <code>sed</code> do Linux são exemplos
de line filters.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Aqui está um exemplo de filtro de linha em Go,
que escreve uma versão em letras maiusculas do
texto de entrada. Este padrão pode ser utilizado
para escrever novos filtros de linha.</p>

          </td>
          <td class="code leading">
            <a target="_blank" href="https://go.dev/play/p/whH3pEZaEbe"><img title="Executar código em nova aba" src="play.png" class="run" /></a><img title="Copiar código" src="clipboard.png" class="copy" />
          <pre class="chroma">
<span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;bufio&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;os&#34;</span>
    <span class="s">&#34;strings&#34;</span>
<span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Envelopar o <code>os.Stdin</code> <code>unbuffered</code> com um
scanner <code>buffered</code> resulta em um método
conveniente de <code>Scan</code> que avança o scanner para
o próximo token; que é a próxima linha em um scanner
padrão.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdin</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>Text</code> retorna o token atual, a próxima
linha do input.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">        <span class="nx">ucl</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToUpper</span><span class="p">(</span><span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">())</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Escreve a linha com letras maiusculas.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ucl</span><span class="p">)</span>
    <span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Verfica erros durante o <code>Scan</code>. O final do arquivo
é esperado pelo <code>Scan</code> e não reportado como um erro.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;error:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Para executar o filtro de linha, primeiro
crie um arquivo de texto com linhas em
letras minusculas.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
<span class="gp">$</span> echo &#39;hello&#39;   &gt; /tmp/lines
<span class="gp">$</span> echo &#39;filter&#39; &gt;&gt; /tmp/lines</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Então use o filtro de linha para ter as
linhas em letras maiusculas.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
<span class="gp">$</span> cat /tmp/lines | go run line-filters.go
<span class="go">HELLO
</span><span class="go">FILTER</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Próximo exemplo: <a href="file-paths">File Paths</a>.
      </p>
      

    <p class="footer">
      Por <a href="https://markmcgranaghan.com">Mark McGranaghan</a> e <a href="https://eli.thegreenplace.net">Eli Bendersky</a> | traduzido por <a href="https://github.com/lucassauro">Lucassauro</a> | <a href="https://github.com/lucassauro/gobyexample">contribua</a> | <a href="https://github.com/mmcgrana/gobyexample#license">licença</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"bufio\"\u000A    \"fmt\"\u000A    \"os\"\u000A    \"strings\"\u000A)\u000A');codeLines.push('func main() {\u000A');codeLines.push('    scanner :\u003D bufio.NewScanner(os.Stdin)\u000A');codeLines.push('    for scanner.Scan() {\u000A');codeLines.push('        ucl :\u003D strings.ToUpper(scanner.Text())\u000A');codeLines.push('        fmt.Println(ucl)\u000A    }\u000A');codeLines.push('    if err :\u003D scanner.Err(); err !\u003D nil {\u000A        fmt.Fprintln(os.Stderr, \"error:\", err)\u000A        os.Exit(1)\u000A    }\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
