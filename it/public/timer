<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example - IT: Timer</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="timer">
      <h2><a href="./">Go by Example - IT</a>: Timer</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Spesso ci troviamo nella situazione di voler eseguire
del codice Go in un certo istante nel futuro, oppure
ripeterne l&rsquo;esecuzione ad intervalli fissati. Le funzioni
built-in di Go <em>timer</em> e <em>ticker</em> risolvono questi
problemi facilmente. Vedremo prima i timer e a seguire
i <a href="ticker">ticker</a>.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/Forbidden"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;time&quot;</span>
<span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>I timer rappresentano un singolo evento nel futuro.
Si indica al timer quanto si vuole attendere e
questo ci fornisce un channel sul quale riceveremo
una notifica dopo il tempo desiderato. In questo caso
si aspettano due secondi.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="nx">timer1</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">NewTimer</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Il comando <code>&lt;-timer1.C</code> permette di bloccarsi sul
channel del timer <code>C</code> fino a quando non riceve un
valore, nel momento in cui il timer scatta.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="o">&lt;-</span><span class="nx">timer1</span><span class="p">.</span><span class="nx">C</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Timer 1 scaduto&quot;</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Se si vuole semplicemente aspettare del tempo è
possibile utilizzare la funzione <code>time.Sleep</code>.
Un buon caso d&rsquo;uso per cui i timer risultano utili
è rappresentato dalla necessità di fermare il timer
prima che sia scattato. Qui vediamo un esempio di
questo use caso d&rsquo;uso.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre>    <span class="nx">timer2</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">NewTimer</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="o">&lt;-</span><span class="nx">timer2</span><span class="p">.</span><span class="nx">C</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Timer 2 scaduto&quot;</span><span class="p">)</span>
    <span class="p">}()</span>
    <span class="nx">stop2</span> <span class="o">:=</span> <span class="nx">timer2</span><span class="p">.</span><span class="nx">Stop</span><span class="p">()</span>
    <span class="k">if</span> <span class="nx">stop2</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Timer 2 fermato&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Il primo timer scatterà dopo circa 2 secondi dall&rsquo;avvio
del programma, mentre il secondo dovrebbe fermarsi prima
avere il tempo di scattare.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run timers.go
<span class="go">Timer 1 scaduto</span>
<span class="go">Timer 2 fermato</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Prossimo esempio: <a href="ticker">Ticker</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/cortinico">@cortinico</a> &amp; <a href="https://twitter.com/_tyge">@_tyge</a> | <a href="mailto:dahhowl@gmail.com,corti.nico@gmail.com">feedback</a> | <a href="https://github.com/golangit/gobyexample-it">source</a> | <a href="https://github.com/golangit/gobyexample-it#license">license</a>
      </p>
    </div>
  </body>
</html>
