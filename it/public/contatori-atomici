<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example - IT: Contatori Atomici</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="contatori-atomici">
      <h2><a href="./">Go by Example - IT</a>: Contatori Atomici</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Il meccanismo principale per gestire lo stato in Go
è quello di utilizzare i channel. Abbiamo visto
questo meccanismo in azione nell&rsquo;esempio dei
<a href="worker-pools">worker pool</a>. Ci sono una serie di altri
meccanismi per gestire lo stato. Adesso vedremo
come si possa utilizzare il package <code>sync/atomic</code>
per realizzare un <em>contatore atomico</em> che viene
letto e aggiornato da svariate goroutine.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/Forbidden"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
<span class="kn">import</span> <span class="s">&quot;time&quot;</span>
<span class="kn">import</span> <span class="s">&quot;sync/atomic&quot;</span>
<span class="kn">import</span> <span class="s">&quot;runtime&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Utilizzermo un unsigned integer per rappresentare
il nostro contatore (che non sarà mai negativo).</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="kd">var</span> <span class="nx">ops</span> <span class="kt">uint64</span> <span class="p">=</span> <span class="mi">0</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Per simulare degli aggiornamenti concorrenti,
avvieremo 50 goroutine. Queste goroutine incrementeranno
il contatore circa ogni millisecondo.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">50</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Per incrementare in modo atomico il
contatore utilizziamo la funzione <code>AddUint64</code>
passandogli il puntatore alla variabile <code>ops</code>
utilizzando l&rsquo;operatore <code>&amp;</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>                <span class="nx">atomic</span><span class="p">.</span><span class="nx">AddUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ops</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Permettiamo alle altre goroutine di procedere.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>                <span class="nx">runtime</span><span class="p">.</span><span class="nx">Gosched</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}()</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Attendiamo un secondo per permettere alle goroutine
di effettuare qualche incremento.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Al fine di poter leggere il contatore in modo sicuro,
mentre viene ancora aggiornato dalle goroutine, possiamo
estrarne una copia del valore e salvarlo dentro
<code>opsFinal</code> tramite la funzione <code>LoadUint64</code>.
Come sopra, dobbiamo passare a questa funzione
il puntatore <code>&amp;ops</code> dal quale leggere il valore</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre>    <span class="nx">opsFinal</span> <span class="o">:=</span> <span class="nx">atomic</span><span class="p">.</span><span class="nx">LoadUint64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ops</span><span class="p">)</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;ops:&quot;</span><span class="p">,</span> <span class="nx">opsFinal</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Se si esegue il sorgente si vede che sono state eseguite
circa 40.000 operazioni.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run atomic-counters.go
<span class="go">ops: 40200</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Adesso vedremo le mutex, un altro strumento per
modificare lo stato.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Prossimo esempio: <a href="mutex">Mutex</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/cortinico">@cortinico</a> &amp; <a href="https://twitter.com/_tyge">@_tyge</a> | <a href="mailto:dahhowl@gmail.com,corti.nico@gmail.com">feedback</a> | <a href="https://github.com/golangit/gobyexample-it">source</a> | <a href="https://github.com/golangit/gobyexample-it#license">license</a>
      </p>
    </div>
  </body>
</html>
