// Підтримка форматування та розбору часу з рядків
// реалізована в Go за допомогою шаблонізованих
// строкових літерали.

package main

import (
	"fmt"
	"time"
)

func main() {
	p := fmt.Println

	// Приклад форматування часу згідно до стандарту RFC3339
	// за допомогою часової константи (типу "рядок").
	t := time.Now()
	p(t.Format(time.RFC3339))

	// Парсинг часу використовує теж значення `вигляду`,
	// що і `Format`.
	t1, e := time.Parse(
		time.RFC3339,
		"2012-11-01T22:08:41+00:00")
	p(t1)

	// І `Format`, і `Parse` використовують строки-приклади.
	// Зазвичай, це константи пакету `time`, але ви можете
	// створювати свої власні шаблони розпізнання часу.
	// Такі шаблони, повинні використовувати наступні значення
	// `Mon Jan 2 15:04:05 MST 2006` для формування шаблону часу,
	// за яким можна розпізнати/відформатувати у відповідний рядок/час.
	// Приклад часу мусить бути таким як показано: рік 2006,
	// 15 для години, Monday відповідно для дня тижня, ну і так далі.
	p(t.Format("3:04PM"))
	p(t.Format("Mon Jan _2 15:04:05 2006"))
	p(t.Format("2006-01-02T15:04:05.999999-07:00"))
	form := "3 04 PM"
	t2, e := time.Parse(form, "8 41 PM")
	p(t2)

	// Для представлення у вигляді числа - можна
	// скористатись стандартним рядковим форматуванням,
	// взявши в допомогу доступні компоненти значення часу.
	fmt.Printf("%d-%02d-%02dT%02d:%02d:%02d-00:00\n",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())

	// Якщо вхідна змінна деформована, `Parse` поверне
	// помилку з поясненням в чому виникла проблема.
	ansic := "Mon Jan _2 15:04:05 2006"
	_, e = time.Parse(ansic, "8:41PM")
	p(e)
}
