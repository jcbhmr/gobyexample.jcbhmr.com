<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example - IT: Ordinamento con Funzioni</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="ordinamento-con-funzioni">
      <h2><a href="./">Go by Example - IT</a>: Ordinamento con Funzioni</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Talvolta è necessario ordinare una collezione seguendo
un ordinamento che è differente dal suo ordinamento
naturale. Ad esempio, supponiamo di dover ordinare
un insieme di stringhe in base alla loro lunghezza
(invece che in ordine alfabetico). Ecco un esempio di
ordinamento personalizzato in Go.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/Forbidden"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;sort&quot;</span>
<span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Al fine di poter ordinare tramite una funzione personalizzata
in Go, abbiamo bisogno di un tipo corrispondente. Abbiamo
creato il tipo <code>ByLength</code> che altro non è che un alias per
il tipo built-in <code>[]string</code>.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">type</span> <span class="nx">ByLength</span> <span class="p">[]</span><span class="kt">string</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Implementiamo l&rsquo;interfaccia <code>sort.Interface</code> implementando
le funzioni <code>Len</code>, <code>Less</code> e <code>Swap</code> al fine di poter usare
la funzione <code>Sort</code> generica dal package <code>sort</code>.
<code>Len</code> e <code>Swap</code> saranno generalmente simili indipendentemente
dal tipo, mentre <code>Less</code> conterrà la logica per l&rsquo;ordinamento
personalizzato. Nel nostro caso, dato che vogliamo ordinare
in baso alla lunghezza, utilizzeremo <code>len(s[i])</code> e
<code>len(s[j])</code> per effettuare il confronto.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">ByLength</span><span class="p">)</span> <span class="nx">Len</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">ByLength</span><span class="p">)</span> <span class="nx">Swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">ByLength</span><span class="p">)</span> <span class="nx">Less</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Dopo aver dichiarato queste funzioni, è possibile
effettuare un ordinamento personalizzato tramite un cast
dello slice <code>fruits</code> al tipo <code>ByLength</code> sul quale chiameremo
la funzione <code>sort.Sort</code>.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fruits</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;pesca&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">,</span> <span class="s">&quot;kiwi&quot;</span><span class="p">}</span>
    <span class="nx">sort</span><span class="p">.</span><span class="nx">Sort</span><span class="p">(</span><span class="nx">ByLength</span><span class="p">(</span><span class="nx">fruits</span><span class="p">))</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">fruits</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Se eseguiano il nostro codice vedremo una lista
di stringhe ordinata per lunghezza, come richiesto.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run sorting-by-functions.go 
<span class="go">[kiwi pesca banana]</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>È quindi sufficiente creare un tipo personalizzato,
implementare i 3 metodi dell&rsquo;interfaccia ed invocare
<code>sort.Sort</code> per ordinare uno slice in Go in modo
arbitrario.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Prossimo esempio: <a href="panic">Panic</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/cortinico">@cortinico</a> &amp; <a href="https://twitter.com/_tyge">@_tyge</a> | <a href="mailto:dahhowl@gmail.com,corti.nico@gmail.com">feedback</a> | <a href="https://github.com/golangit/gobyexample-it">source</a> | <a href="https://github.com/golangit/gobyexample-it#license">license</a>
      </p>
    </div>
  </body>
</html>
