<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example - IT: Rate Limiting</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="rate-limiting">
      <h2><a href="./">Go by Example - IT</a>: Rate Limiting</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Il <a href="https://en.wikipedia.org/wiki/Rate_limiting"><em>Rate limiting</em></a>
è un&rsquo;importante tecnica per controllare l&rsquo;uso delle
risorse e mantenere un&rsquo;alta qualità di servizio. Go
supporta elegantemente il rate limiting tramite le
goroutine, i channel e i <a href="ticker">ticker</a>.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/Forbidden"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;time&quot;</span>
<span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Come prima cosa vedremo un semplice esempio di rate
limiting. Supponiamo di dover limitare il
numero di richieste (per esempio in un server
HTTP). Utilizzeremo un channel per
mimare l&rsquo;entrata delle richieste.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="nx">richieste</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">richieste</span> <span class="o">&lt;-</span> <span class="nx">i</span>
    <span class="p">}</span>
    <span class="nb">close</span><span class="p">(</span><span class="nx">richieste</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Questo channel <code>limitatore</code> riceverà un valore ogni
200 millisecondi. Fungerà da regolatore nel
nostro schema di rate limiting.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="nx">limitatore</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Tick</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">200</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Bloccando l&rsquo;esecuzione su una ricezione da
<code>limitatore</code> prima di servire ogni richiesta, ci
limitiamo a fare al massimo una richiesta ogni
200 millisecondi.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="k">for</span> <span class="nx">ric</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">richieste</span> <span class="p">{</span>
        <span class="o">&lt;-</span><span class="nx">limitatore</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;richiesta&quot;</span><span class="p">,</span> <span class="nx">ric</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">())</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Potremmo aver bisogno di sostenere brevi
&ldquo;raffiche&rdquo; di richieste, mantenendo comunque
il rate limiting. Possiamo fare ciò mettendo
bufferizzando il nostro channel. Questo channel
<code>limitatoreARaffica</code> ci permetterà di sostenere
raffiche fino ad un massimo di 3 richieste.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="nx">limitatoreARaffica</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Riempiamo il channel per dire che già dall&rsquo;inizio
possiamo prendere in carico 3 richieste.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">limitatoreARaffica</span> <span class="o">&lt;-</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Ogni 200 millisecondi proveremo ad inviare un
nuovo valore al <code>limitatoreARaffica</code>, fino ad
arrivare al suo limite di 3 richieste.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Tick</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">limitatoreARaffica</span> <span class="o">&lt;-</span> <span class="nx">t</span>
        <span class="p">}</span>
    <span class="p">}()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Ora simuleremo 5 richieste al nostro limitatore.
Le prime tre potranno godere della capacità del
limitatore di eseguire richieste a raffica.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre>    <span class="nx">richiesteARaffica</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">richiesteARaffica</span> <span class="o">&lt;-</span> <span class="nx">i</span>
    <span class="p">}</span>
    <span class="nb">close</span><span class="p">(</span><span class="nx">richiesteARaffica</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">ric</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">richiesteARaffica</span> <span class="p">{</span>
        <span class="o">&lt;-</span><span class="nx">limitatoreARaffica</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;richiesta&quot;</span><span class="p">,</span> <span class="nx">ric</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Eseguendo il nostro programma vedremo il gruppo
di richieste che verranno gestite ognuna ogni 200
millisecondi.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run rate-limiting.go
<span class="go">richiesta 1 2016-04-17 19:05:37.736132953 +0200 CEST</span>
<span class="go">richiesta 2 2016-04-17 19:05:37.936138961 +0200 CEST</span>
<span class="go">richiesta 3 2016-04-17 19:05:38.136209943 +0200 CEST</span>
<span class="go">richiesta 4 2016-04-17 19:05:38.336145582 +0200 CEST</span>
<span class="go">richiesta 5 2016-04-17 19:05:38.536120745 +0200 CEST</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Invece, per il nostro secondo gruppo di richieste
vedremo che le prime tre vengono eseguite
all&rsquo;istante, mentre le altre 2 a distanza di 200
millisecondi l&rsquo;una dall&rsquo;altra.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre><span class="go">richiesta 1 2016-04-17 19:05:38.536251527 +0200 CEST</span>
<span class="go">richiesta 2 2016-04-17 19:05:38.536266185 +0200 CEST</span>
<span class="go">richiesta 3 2016-04-17 19:05:38.536277665 +0200 CEST</span>
<span class="go">richiesta 4 2016-04-17 19:05:38.736385724 +0200 CEST</span>
<span class="go">richiesta 5 2016-04-17 19:05:38.936385957 +0200 CEST</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Prossimo esempio: <a href="contatori-atomici">Contatori Atomici</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/cortinico">@cortinico</a> &amp; <a href="https://twitter.com/_tyge">@_tyge</a> | <a href="mailto:dahhowl@gmail.com,corti.nico@gmail.com">feedback</a> | <a href="https://github.com/golangit/gobyexample-it">source</a> | <a href="https://github.com/golangit/gobyexample-it#license">license</a>
      </p>
    </div>
  </body>
</html>
