<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go в примерах: Исполняющие процессы (Exec'ing Processes)</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'spawning-processes';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'signals';
          }
          
      }
  </script>
  <body>
    <div class="example" id="execing-processes">
      <h2><a href="./">Go в примерах</a>: Исполняющие процессы (Exec'ing Processes)</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>В предыдущем примере мы рассмотрели <a href="spawning-processes">порождение внешних
процессов</a>. Мы делаем это,
когда нам нужен внешний процесс, доступный для
запущенного процесса Go. Иногда мы просто хотим
полностью заменить текущий процесс Go другим
(возможно, не Go). Для этого мы будем использовать
реализацию Go-имплементацию классической функции
<a href="http://en.wikipedia.org/wiki/Exec_(operating_system)"><code>exec</code></a>.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="http://play.golang.org/p/dojmebwCvC4" target="_blank"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&quot;os&quot;</span>
    <span class="s">&quot;os/exec&quot;</span>
    <span class="s">&quot;syscall&quot;</span>
<span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Для нашего примера мы выполним <code>ls</code>. Go требует
абсолютного пути к двоичному файлу, который мы
хотим выполнить, поэтому мы используем <code>exec.LookPath</code>,
чтобы найти его (вероятно, <code>/bin/ls</code>).</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">binary</span><span class="p">,</span> <span class="nx">lookErr</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nx">LookPath</span><span class="p">(</span><span class="s">&quot;ls&quot;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">lookErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">lookErr</span><span class="p">)</span>
    <span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>Exec</code> требует аргументы в форме среза
(в сочетании с одной большой строкой). Мы используем в <code>ls</code>
несколько общих аргументов. Обратите внимание, что
первым аргументом должно быть имя программы.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">args</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;ls&quot;</span><span class="p">,</span> <span class="s">&quot;-a&quot;</span><span class="p">,</span> <span class="s">&quot;-l&quot;</span><span class="p">,</span> <span class="s">&quot;-h&quot;</span><span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>Exec</code> также нужен набор <a href="environment-variables">переменных среды</a>
для использования. Здесь мы просто предоставляем
нашу текущую среду.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre>    <span class="nx">env</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Environ</span><span class="p">()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Вот фактический вызов <code>syscall.Exec</code>. Если этот вызов
будет успешным, выполнение нашего процесса на этом
закончится и будет заменено процессом <code>/bin/ls -a -l -h</code>.
В случае ошибки мы получим возвращаемое значение.</p>

          </td>
          <td class="code">
            
          <div class="highlight"><pre>    <span class="nx">execErr</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">binary</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">execErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">execErr</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>When we run our program it is replaced by <code>ls</code>.</p>

          </td>
          <td class="code leading">
            
          <div class="highlight"><pre><span class="gp">$</span> go run execing-processes.go
<span class="go">total 16</span>
<span class="go">drwxr-xr-x  4 mark 136B Oct 3 16:29 .</span>
<span class="go">drwxr-xr-x 91 mark 3.0K Oct 3 12:50 ..</span>
<span class="go">-rw-r--r--  1 mark 1.3K Oct 3 16:28 execing-processes.go</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Обратите внимание, что Go не предлагает классическую
Unix функцию <code>форка</code>. Обычно это не проблема,
так как запуск горутин, порождение процессов и
выполнение процессов покрывают большинство случаев
использования <code>форка</code>.</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Следующий пример: <a href="signals">Сигналы (Signals)</a>.
      </p>
      
      <p class="footer">
        by <a href="https://markmcgranaghan.com">Mark McGranaghan</a> | <a href="https://github.com/mmcgrana/gobyexample/blob/master/examples/execing-processes">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
        <br/>
        переведено Nick S. | <a href="https://github.com/badkaktus/gobyexample">исходники</a>
      </p>
    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"os\"\u000A    \"os/exec\"\u000A    \"syscall\"\u000A)\u000A');codeLines.push('func main() {\u000A');codeLines.push('    binary, lookErr := exec.LookPath(\"ls\")\u000A    if lookErr != nil {\u000A        panic(lookErr)\u000A    }\u000A');codeLines.push('    args := []string{\"ls\", \"-a\", \"-l\", \"-h\"}\u000A');codeLines.push('    env := os.Environ()\u000A');codeLines.push('    execErr := syscall.Exec(binary, args, env)\u000A    if execErr != nil {\u000A        panic(execErr)\u000A    }\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
