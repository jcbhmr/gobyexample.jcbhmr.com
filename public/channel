<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example - IT: Channel</title>
    <link rel=stylesheet href="site.css">
  </head>
  <body>
    <div class="example" id="channel">
      <h2><a href="./">Go by Example - IT</a>: Channel</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>I <em>channel</em> sono i <a href="https://it.wikipedia.org/wiki/Pipe_(informatica)">pipe</a>
che connettono goroutine concorrenti. Puoi mandare
e ricevere dei valori da una goroutine a un&rsquo;altra
goroutine attraverso un channel.</p>

          </td>
          <td class="code empty leading">
	        
            
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        <a href="http://play.golang.org/p/Forbidden"><img title="Run code" src="play.png" class="run" /></a>
            <div class="highlight"><pre><span class="kn">package</span> <span class="nx">main</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Puoi creare un nuovo channel con la sintassi
<code>make(chan tipo)</code>. I channel sono dichiarati con i
tipi dei valori che possono veicolare.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="nx">messages</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Puoi <em>inviare</em> un valore in un channel con la
sintassi <code>channel &lt;-</code>. Di seguito mandiamo la
stringa <code>&quot;ping&quot;</code> al channel <code>messages</code> che abbiamo
dichiarato in precedenza, in una nuova goroutine.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre>    <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="nx">messages</span> <span class="o">&lt;-</span> <span class="s">&quot;ping&quot;</span> <span class="p">}()</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Puoi <em>ricevere</em> un valore da un channel con la
sintassi <code>&lt;-channel</code>. Di seguito riceveremo il
messaggio <code>&quot;ping&quot;</code> che abbiamo inviato a messages
precedentemente nella goroutine e lo stamperemo.</p>

          </td>
          <td class="code">
	        
            <div class="highlight"><pre>    <span class="nx">msg</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">messages</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Quando eseguiremo il programma potremmo vedere che
<code>&quot;ping&quot;</code> è passato senza problemi da una goroutine
all&rsquo;altra attraverso il nostro channel.</p>

          </td>
          <td class="code leading">
	        
            <div class="highlight"><pre><span class="gp">$</span> go run channels.go 
<span class="go">ping</span>
</pre></div>

          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Di default l&rsquo;invio e il ricevimento si bloccano finché
sia il mittente che il destinatario non sono pronti.
Questo ci ha permesso di aspettare alla fine del
programma per il messaggio <code>&quot;ping&quot;</code> senza dover
effetturare alcuna sincronizzazione.</p>

          </td>
          <td class="code empty">
	        
            
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Prossimo esempio: <a href="channel-con-buffer">Channel con Buffer</a>.
      </p>
      
      <p class="footer">
        by <a href="https://twitter.com/cortinico">@cortinico</a> &amp; <a href="https://twitter.com/_tyge">@_tyge</a> | <a href="mailto:dahhowl@gmail.com,corti.nico@gmail.com">feedback</a> | <a href="https://github.com/golangit/gobyexample-it">source</a> | <a href="https://github.com/golangit/gobyexample-it#license">license</a>
      </p>
    </div>
  </body>
</html>
