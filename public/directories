<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go Em Exemplos: Directories</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      onkeydown = (e) => {
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'file-paths';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'temporary-files-and-directories';
          }
          
      }
  </script>
  <body>
    <div class="example" id="directories">
      <h2><a href="./">Go Em Exemplos</a>: Directories</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Go possui várias funções úteis para trabalhar
com diretórios em um sistema de arquivos.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a target="_blank" href="https://go.dev/play/p/gG6xwQ4_zcd"><img title="Executar código em nova aba" src="play.png" class="run" /></a><img title="Copiar código" src="clipboard.png" class="copy" />
          <pre class="chroma"><span class="kn">package</span> <span class="nx">main</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;os&#34;</span>
    <span class="s">&#34;path/filepath&#34;</span>
<span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">check</span><span class="p">(</span><span class="nx">e</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Cria um novo sub-diretório no atual diretório.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Mkdir</span><span class="p">(</span><span class="s">&#34;subdir&#34;</span><span class="p">,</span> <span class="mo">0755</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Ao criar diretórios temporários, é uma boa prática
adicionar um <code>defer</code> para removê-los. <code>os.RemoveAll</code>
irá deletar uma árvore de diretórios por completo
(similar ao comando linux rm -rf).</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="k">defer</span> <span class="nx">os</span><span class="p">.</span><span class="nf">RemoveAll</span><span class="p">(</span><span class="s">&#34;subdir&#34;</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Função auxiliar para criar um novo arquivo vazio.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">createEmptyFile</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
        <span class="nf">check</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nf">WriteFile</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="mo">0644</span><span class="p">))</span>
    <span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="nf">createEmptyFile</span><span class="p">(</span><span class="s">&#34;subdir/file1&#34;</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>É possível criar hierarquia de diretórios, inclusive
parentes com <code>MkdirAll</code>. Isto é similar ao comando de
linux <code>mkdir -p</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">MkdirAll</span><span class="p">(</span><span class="s">&#34;subdir/parent/child&#34;</span><span class="p">,</span> <span class="mo">0755</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="nf">createEmptyFile</span><span class="p">(</span><span class="s">&#34;subdir/parent/file2&#34;</span><span class="p">)</span>
    <span class="nf">createEmptyFile</span><span class="p">(</span><span class="s">&#34;subdir/parent/file3&#34;</span><span class="p">)</span>
    <span class="nf">createEmptyFile</span><span class="p">(</span><span class="s">&#34;subdir/parent/child/file4&#34;</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>ReadDir</code> lista o conteúdo do diretório,
retornando uma slice de objetos do tipo
<code>os.DirEntry</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">ReadDir</span><span class="p">(</span><span class="s">&#34;subdir/parent&#34;</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Listing subdir/parent&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">entry</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34; &#34;</span><span class="p">,</span> <span class="nx">entry</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">entry</span><span class="p">.</span><span class="nf">IsDir</span><span class="p">())</span>
    <span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>Chdir</code> permite mudar o diretório de trabalho atual,
similar ao comando de linux <code>cd</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Chdir</span><span class="p">(</span><span class="s">&#34;subdir/parent/child&#34;</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Agora, será visto a lista de conteúdos de
<code>subdir/parent/child</code> quando listar o
diretório <em>atual</em> (&ldquo;.&rdquo;).</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">ReadDir</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Listing subdir/parent/child&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">entry</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34; &#34;</span><span class="p">,</span> <span class="nx">entry</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">entry</span><span class="p">.</span><span class="nf">IsDir</span><span class="p">())</span>
    <span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>cd</code> de volta ao ponto de início.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Chdir</span><span class="p">(</span><span class="s">&#34;../../..&#34;</span><span class="p">)</span>
    <span class="nf">check</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>É possível visitar um diretório <em>recursivamente</em>,
incluindo todos os seus sub-diretórios. <code>Walk</code>
aceita uma função callback para tratar todo arquivo
ou diretório visitado.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma">
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Visiting subdir&#34;</span><span class="p">)</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Walk</span><span class="p">(</span><span class="s">&#34;subdir&#34;</span><span class="p">,</span> <span class="nx">visit</span><span class="p">)</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>visit</code> é chamado recursivamente para cada arquivo
e diretório encontrado por <code>filepath.Walk</code>.</p>

          </td>
          <td class="code">
            
          <pre class="chroma">
<span class="kd">func</span> <span class="nf">visit</span><span class="p">(</span><span class="nx">p</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">info</span> <span class="nx">os</span><span class="p">.</span><span class="nx">FileInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">err</span>
    <span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34; &#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">info</span><span class="p">.</span><span class="nf">IsDir</span><span class="p">())</span>
    <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <pre class="chroma"><span class="gp">$</span> go run directories.go
<span class="go">Listing subdir/parent
</span><span class="go">  child true
</span><span class="go">  file2 false
</span><span class="go">  file3 false
</span><span class="go">Listing subdir/parent/child
</span><span class="go">  file4 false
</span><span class="go">Visiting subdir
</span><span class="go">  subdir true
</span><span class="go">  subdir/file1 false
</span><span class="go">  subdir/parent true
</span><span class="go">  subdir/parent/child true
</span><span class="go">  subdir/parent/child/file4 false
</span><span class="go">  subdir/parent/file2 false
</span><span class="go">  subdir/parent/file3 false</span></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Próximo exemplo: <a href="temporary-files-and-directories">Temporary Files and Directories</a>.
      </p>
      

    <p class="footer">
      Por <a href="https://markmcgranaghan.com">Mark McGranaghan</a> e <a href="https://eli.thegreenplace.net">Eli Bendersky</a> | traduzido por <a href="https://github.com/lucassauro">Lucassauro</a> | <a href="https://github.com/lucassauro/gobyexample">contribua</a> | <a href="https://github.com/mmcgrana/gobyexample#license">licença</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"os\"\u000A    \"path/filepath\"\u000A)\u000A');codeLines.push('func check(e error) {\u000A    if e !\u003D nil {\u000A        panic(e)\u000A    }\u000A}\u000A');codeLines.push('func main() {\u000A');codeLines.push('    err :\u003D os.Mkdir(\"subdir\", 0755)\u000A    check(err)\u000A');codeLines.push('    defer os.RemoveAll(\"subdir\")\u000A');codeLines.push('    createEmptyFile :\u003D func(name string) {\u000A        d :\u003D []byte(\"\")\u000A        check(os.WriteFile(name, d, 0644))\u000A    }\u000A');codeLines.push('    createEmptyFile(\"subdir/file1\")\u000A');codeLines.push('    err \u003D os.MkdirAll(\"subdir/parent/child\", 0755)\u000A    check(err)\u000A');codeLines.push('    createEmptyFile(\"subdir/parent/file2\")\u000A    createEmptyFile(\"subdir/parent/file3\")\u000A    createEmptyFile(\"subdir/parent/child/file4\")\u000A');codeLines.push('    c, err :\u003D os.ReadDir(\"subdir/parent\")\u000A    check(err)\u000A');codeLines.push('    fmt.Println(\"Listing subdir/parent\")\u000A    for _, entry :\u003D range c {\u000A        fmt.Println(\" \", entry.Name(), entry.IsDir())\u000A    }\u000A');codeLines.push('    err \u003D os.Chdir(\"subdir/parent/child\")\u000A    check(err)\u000A');codeLines.push('    c, err \u003D os.ReadDir(\".\")\u000A    check(err)\u000A');codeLines.push('    fmt.Println(\"Listing subdir/parent/child\")\u000A    for _, entry :\u003D range c {\u000A        fmt.Println(\" \", entry.Name(), entry.IsDir())\u000A    }\u000A');codeLines.push('    err \u003D os.Chdir(\"../../..\")\u000A    check(err)\u000A');codeLines.push('    fmt.Println(\"Visiting subdir\")\u000A    err \u003D filepath.Walk(\"subdir\", visit)\u000A}\u000A');codeLines.push('func visit(p string, info os.FileInfo, err error) error {\u000A    if err !\u003D nil {\u000A        return err\u000A    }\u000A    fmt.Println(\" \", p, info.IsDir())\u000A    return nil\u000A}\u000A');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
